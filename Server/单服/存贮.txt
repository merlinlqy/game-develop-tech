游戏服务器持久化是另外一个需要详细考虑的问题。

从逻辑层到存储层，因为存储层一般都是慢速调用，大部分存储请求都是异步。

数据可以考虑使用关系型数据库，例如MySQL，SQLServer。暂时没看到使用Orecle。
也可以使用KV性质的数据库，例如MongoDB。

而为了使数据库访问更快，很多服务器都在中间插一层RedisDB作为暂时存储层。

不管使用那种数据库，简单的架构都会使用一个独立线程来做数据落地。使得数据库的慢速存储不会影响正常的游戏逻辑。

从架构上来说，会采用简单的生产者-消费者模式（有些直接是数据库本身已经做了抽象），把所有的数据库请求收集起来（DBServer），然后分发给不同的Worker来做真实的数据库落地。

而由于数据库自身的特殊性，在数据库之上还会再追加一层类似数据库落地操作记录的抽象。
也就是先做一个数据追加的记录条，然后再写入数据库。
这样做的好处就是可以做容灾备份，万一数据库在某个时间无法操作，可以根据这些操作记录来进行数据恢复。

最后的结果就可以让数据回档的时间减少到最小。



