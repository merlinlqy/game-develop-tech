Remote Process Call，其本质就是通过网络通讯，调用远端的函数（方法）。

RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器）上的一个函数或方法（可以统称为服务）并得到返回的结果。

RPC会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯）。

客户端发起请求，服务器返回响应（类似于Http的工作方式）RPC在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。


在游戏中，网络支持一般都会分成两部分，第一部分是C++，第二部分是脚本（Lua或者Python），因此RPC也可以分别在这两层实现。
而RPC下面的网络协议对RPC来说也是透明的，简单的暴力封包，或者http，proto buffer等都可以。

简单的调用接口就是： RPC(object, process_func, args)
Object是指调用的对象，一般可以是玩家对象名字，服务器名字等
process_func是指调用的函数（方法）
args即为参数

RPC是双向的（即游戏服务器可以调用游戏客户端的RPC，也可以游戏客户端调用游戏服务器的RPC）。
下面简单设计一个S->C的RPC

 Server           Client
  应用层           应用层
    |               |
  封装           解包，映射函数
    |               |
  网络             网络
    |               |
  数据包    ->    数据包           


RPC存在分布式问题，也就是当调用对象是在分布式服务器中，需要实现寻找对象（名字服务），特别在对象迁移的时候，需要进行各种容错处理


