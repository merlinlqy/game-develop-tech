基于buff设计的技能系统是在程序实现上的方式，对外的还是会区分技能，buff。

这个设计的思想就是，无论是buff，还是技能，天赋等等，在结算的时候都是为目标增加一个buff（注意，这里的buff可以抽象成为一个结算buff），所有的结算都是基于这些buff来结算。

这样做的好处就是做覆盖，优先级等，将会带来一定的便捷性。

流程如下：
在结算的关键点的时候，先初始化一个结算buff列表。
然后根据当前触发的技能，挂上他对应的结算buff。
然后根据当前触发的所有buff，挂上对应的结算buff。
最后对所有的结算buff统一进行结算，这里的同一个结算的buff可能会有挂多次，这里可以统一做成一个处理类来处理即可。

常见技能属性处理方式：
互相增益关系，例如技能A增加1%，技能B增加2%，由于都是属于同一个buff，一次在该结算buff那里统一做结算即可。
互相覆盖及优先级问题，技能A与技能B存在覆盖关系，因此在结算buff的时候，根据规则做覆盖处理即可。
结算buff由于其他结算buff，因为已经做了统一处理，因此在当存在这种递进关系中，各自的结算buff做处理即可。即优先级高的删除优先级低，优先级低的看到有优先级高的则不增加。

buff恢复问题，有些buff被高级buff覆盖，在高级buff结束后，低级buff需要恢复问题。一般尽量避免这种设计，采取高级直接覆盖低级，而低级不做恢复处理。
如果真需要这种的时候，建议在高级buff挂上去的时候，缓冲低级buff，在高级销毁的时候重新挂上低级buff。




