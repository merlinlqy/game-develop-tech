Lazy load的意思是当在使用的时候才去把真实数值载入，而非在声明的时候就载入。
好处就是按需索取（载入的过程可能需要读数据库），而使用方可能只需要部分字段就足够了。

java版:
/**
* 为了方便与标准的 Java 函数式接口交互，Lazy 也实现了 Supplier
*/
public class Lazy<T> implements Supplier<T> {

    private final Supplier<? extends T> supplier;
    
    // 利用 value 属性缓存 supplier 计算后的值
    private T value;

    private Lazy(Supplier<? extends T> supplier) {
        this.supplier = supplier;
    }

    public static <T> Lazy<T> of(Supplier<? extends T> supplier) {
        return new Lazy<>(supplier);
    }

    public T get() {
        if (value == null) {
            T newValue = supplier.get();

            if (newValue == null) {
                throw new IllegalStateException("Lazy value can not be null!");
            }

            value = newValue;
        }

        return value;
    }
}

test：
Lazy<Integer> a = Lazy.of(() -> 10 + 1);
int b = a.get() + 1;
// get 不会再重新计算, 直接用缓存的值
int c = a.get();




Lua版:
local lazy = {}

function lazy:__index(key)
  local v = self.__supplier[key](self, key)
  rawset(self, key, v)
  return v
end

function lazy:__newindex(key, supplier)
  self.__supplier[key] = supplier
end

return function (t)
  t.__supplier = {}
  return setmetatable(t, lazy)
end

-- test.lua
local lazy = require "lazy"

local obj = lazy {}

function obj:a()
  print "Lazy"
  return 10 + 1
end

print(obj.a)



C#版:
// Initialize by invoking a specific constructor on Order when Value
// property is accessed
Lazy<Orders> _orders = new Lazy<Orders>(() => new Orders(100));

test:
// We need to create the array only if displayOrders is true
if (displayOrders == true)
{
    DisplayOrders(_orders.Value.OrderData);
}
else
{
    // Don't waste resources getting order data.
}





