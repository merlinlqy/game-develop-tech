游戏客户端，是指与游戏服务器相对应，为客户提供本地服务的程序。一般安装在普通的用户电脑上，需要与游戏服务端互相配合运行。

游戏客户端也是从文字游戏，黑白游戏，彩色游戏(2d游戏)，3d游戏。

客户端可以分成3层。
第一层是系统层，这部分不同的操作系统将会有不同的接口，例如windows采用DirectX或者OpenGL，Mac采用Metal，Linux采用OpenGL。现在还会用Vulkan。在这下面就是驱动层，驱动层一般是厂家与操作系统定义。
为了实现一些简单的功能或者做实验都会在此这层直接实现。

第二层是引擎层，其目的是提供给第三层使用。他会抽象第一层的接口，让开发者不再需要关注接口细节。游戏引擎层会关注性能，画面质量等。

第三层就是游戏逻辑层，例如场景管理，UI等。

下面是对Game Engine Architecture对一个引擎的主要内容进行列举：
1. 3d数学
2. 开启和关闭
3. 内存管理
4. 引擎配置
5. 文件系统
6. 资源管理
7. 主循环。渲染循环，游戏循环
8. 时间管理
9. 多进程管理
10. 网络
11. 玩家交互
12. 输入
13. 输出
14. 调试系统
15. 打Log
16. 调试渲染
17. 深度缓冲的三角形光栅化
18. 渲染管线
19. 光线及全局光照
20. 特效
21. 动画
22. 骨骼
23. 蒙皮
24. 前处理
25. 压缩技术
26. 物理
27. 碰撞
28. 碰撞系统
29. 游戏玩法
30. 游戏世界编辑器
31. 块及流式加载
32. 实时更新游戏对象
33. 事件和消息传送
34. 脚本化













