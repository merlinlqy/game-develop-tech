游戏的战斗系统会很复杂，而且很多时候都是一开始简单，逐步迭代以后变得非常复杂。

下面以MMO的一些最基本的技能分析开始。

1. 普通物理攻击。
普攻是最简单的攻击方式，一个点对点的攻击。 计算方式可以是 造成伤害 = 玩家攻击力 - 对方防御力

2. 单体法术攻击。
单对单的法术攻击，与普通物理攻击不一样，法术攻击是有消耗的，一般设计都会采取法术不足则不给释放。 计算方式也可以简化成 造成伤害 = 玩家法术伤害 - 目标法术防御力

3. 群体法术攻击。
与单体法术不同的地方是该攻击方式是多目标。具体设计要根据法术要求。

4. 法术场攻击。
与群体法术攻击最大的不同在于，群体法术是直接针对多目标，而法术场是针对当前场景及玩家所处的位置。也就是该法术能够形成的“场”。例如面前的180度范围，一个圆形范围，实现难点主要是要计算该场内的目标。
因为法术场本身需要目标进入场内并持续“一定”时间，所以这里有不少细节处理。最简单的处理方式就是按照tick来计算，每个tick内所有在场内的目标就结算，而不考虑目标在场内的时间。
持续时间越长，伤害越高这种设计，一般会在法术场之外再增加buff来实现。

对于回合制游戏，攻击的cd则是当前回合。
对于即时战略类游戏，所有的攻击都有一定的间隔。魔兽世界首先会采取一个公用cd（约2s），cd结束以后才能继续下一个法术。法术自身也有施法时间，冷却时间。

半回合制，半即时战略类游戏。这种类型一般都会在单机游戏里面出现。也就是说，每个对象（玩家，敌人）都是在跑进度条，到了进度条即可攻击，而每个对象进度条的速度不一样（一般与敏捷相关）。
而攻击指令下达前，有停止进度条的，也有不停止进度条的。而在不停止进度条的时候，也有先后到达的顺序问题导致不同的施法效果。
有一个日本的动作类游戏，会在场地游走，攻击是需要跑到目标位置攻击，而在奔跑之中，对方甚至可以打断你当前已下达的指令。

通用攻击伤害计算公式（事实上会非常复杂）：
伤害 = 基本攻击力 * (1 + 属性增益)  *  (1 - 属性抵抗)

在普通攻击和法术攻击之外，就是buff（有益叫做buff，损益就叫做debuff，下面把两种合起来统一叫做buff）。

buff与法术最大的区别就是，法术是即时结算。而buff是持续作用，例如“持续30s，每5秒造成伤害XX”。


通用模块vs独立模块
通用模块模式是指所有的技能都是用单一的通用模块，然后各个技能只是override某个接口。
独立模块就是不存在一个单一的通用模块，每个技能都是独立的文件（类）实现。

技能必然会导致系统复杂，会有各种例外，因此“通用”有可能最后也不是“通用”，“通用”另外一个缺点就是限制了设计思想。
但是独立模块最大的问题是优先级及覆盖问题会非常难解决，复杂度也会成指数级增长。

两种方式各有好处，一般都是结合使用。




