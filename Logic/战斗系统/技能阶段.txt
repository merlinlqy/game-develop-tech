释放技能是分阶段的。

在玩家角度，可以简单的分解成，预读阶段，引导阶段，施法前摇，施法中，施法后摇

在引导阶段结束以后，则会立即消耗施法的消耗。而在施法前摇阶段和施法中，原则上是不允许主动打断，而施法后摇一般允许打断。

施法后摇一般只是客户端展现，而在服务器端只是一个播放动画的rpc，没有实际后摇。


在施法逻辑之中，在每个阶段均有可能发送rpc供服务器验证。特别在有打断技能导致技能冷却之下，这部分验证就必不可少。

而在施法前摇结束，也就是施法中，则会出现实际性的伤害（增益），而由于这部分也会存在各种附加属性，然后伤害后也会触发其他技能。因此大致会把他分成三个阶段：

pre_attack
attack
after_attack


而在pre_attack阶段，各种技能会存在相互覆盖，优先级，前后影响等各种细节问题，所以从代码是线上，尽可能采取简单的链式方式（或者顺序配表）。
采取优先级极有可能出现需要在优先级2,3之间插一个。或者之前预定优先级100最高，但是又来了一个新技能由更高优先级，导致数字的优先级不可控。

从技能上来说，程序会采取尽可能由策划配表的方式，因此最后可能会采取状态机，行为树等等更高级的方式。

attack阶段也是会有各种加成，例如增加1%的伤害再叠加一个增加2%的伤害，那么最终伤害是3%，还是101% * 102%。

无论采取那种方式，前后顺序也是很有必要理清，所以在是线上，也是尽量采取扁平的方式，而尽量避免加成里面再调用加成，到时深度过大甚至循环引用的问题。

after_attack一般是指该技能还带有特殊属性，例如会上一层debuff，这里也是尽量避免设计上的循环引用问题。


